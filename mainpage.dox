/**
\mainpage The mainpage documentation
 * FlashGraph is an SSD-based graph analysis framework that we designed to
 * process graphs with billions of vertices and hundreds of billions of edges
 * or even larger. We extend FlashGraph to support processing more data
 * structures such as sparse matrices and dense matrices. As such, FlashGraph
 * is now able to support a wide variety of data mining and machine learning
 * algorithms. We address the entire data analysis framework with FlashGraph-ng.
 *
 * The current implementation of FlashGraph-ng has three main components:
 * - _SAFS_: a user-space filesystem that achieves the maximal I/O throughput
 *   of large SSD arrays.
 * - _FlashGraph_: a general-purpose graph analysis framework that exposes
 *   vertex-centric programming interface for users to express graph algorithms.
 * - _FlashMatrix_: a matrix computation engine that exposes a small set of
 *   generalized matrix operations on sparse matrices and dense matrices to
 *   express varieties of data mining and machine learning algorithms.
 *
 * The figure below shows the architecture of FlashGraph-ng. At the bottem is
 * SAFS, which sits on top of an array of SSDs and exposes a unified asynchronous
 * I/O interface to the data analysis frameworks. On the left is FlashGraph,
 * which exposes a vertex-centric programming interface for users to express
 * a varieties of graph algorithms. FlashGraph contains a set of graph algorithm
 * library written in C++. The graph library is integrated with R so that
 * R users can invoke the graph algorithms in R directly. On the right is
 * FlashMatrix, which provides both in-memory and external-memory vector and
 * matrix implementations as well as a small set of generalized operators
 * to perform computation on the vectors and matrices. FlashMatrix has
 * an optimizer that optimizes a sequence of operations to achieve performance
 * of an application comparable to a manually optimized C/C++ implementation.
 * FlashMatrix also provides an R interface for the generalized operators.
 * In the future, we will provide an R compiler so that R users can implement
 * the user-defined functions in R and pass them to the generalized operators
 * to perform actual computation.
 * ![Architecture](architecture.png "The architecture of FlashGraph-ng")
 */
